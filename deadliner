#!/usr/bin/python3

import os
import functools
import typing
import datetime
from sortedcontainers import SortedSet


@functools.total_ordering
class Record:
  def __init__(self, year: int, month: int, day: int, hour: int, minute: int, task: str):
    self.dated_task = (year, month, day, hour, minute, task)


  def __eq__(self, other: typing.Self) -> bool:
    return self.dated_task == other.dated_task
  
  
  def __lt__(self, other: typing.Self) -> bool:
    return self.dated_task < other.dated_task
  

  def __str__(self):
    year = str(self.dated_task[0]).zfill(4)
    month = str(self.dated_task[1]).zfill(2)
    day = str(self.dated_task[2]).zfill(2)
    hour = str(self.dated_task[3]).zfill(2)
    minute = str(self.dated_task[4]).zfill(2)
    return f"{year}.{month}.{day} {hour}:{minute} {self.dated_task[5]}"
  

  def __hash__(self):
    return hash(self.dated_task)


def Parse(line: str) -> Record:
  """example:\n
  2025.10.19 11:25 do deadliner app"""
  return Record(
    int(line[0:4]),
    int(line[5:7]),
    int(line[8:10]),
    int(line[11:13]),
    int(line[14:16]),
    line[17:]
  )


def Init(data_path: str) -> SortedSet[Record]:
  result = SortedSet()
  with open(data_path, 'r') as data:
    for line in data.readlines():
      result.add(Parse(line.strip()))
  return result


def Save(sorted_set: SortedSet[Record], data_path: str) -> None:
  with open(data_path, 'w') as data:
    for record in sorted_set:
      data.write(str(record) + '\n')


def RoughValidate(date: str, time: str) -> bool:
  # length_check
  len_check = len(date) in (5, 10) and len(time) in (1, 5)
  if not len_check:
    return False
  
  # format_check
  if (len(date) == 5):
    date_format_check = date[0:2].isdigit() and date[3:].isdigit()
  else:
    date_format_check = date[0:4].isdigit() and date[5:7].isdigit() and date[8:].isdigit()

  time_format_check = time[0] == '_' if len(time) == 1 else time[0:2].isdigit() and time[3:].isdigit()

  format_check = date_format_check and time_format_check
  if not format_check:
    return False
  
  # semantics_check
  if (len(date) == 5):
    date_semantics_check = 1 <= int(date[0:2]) <= 12 and 1 <= int(date[3:]) <= 31
  else:
    date_semantics_check = 1 <= int(date[5:7]) <= 12 and 1 <= int(date[8:]) <= 31

  time_semantics_check = True if len(time) == 1 else 0 <= int(time[0:2]) <= 23 and 0 <= int(time[3:]) <= 59
  return date_semantics_check and time_semantics_check


def Date(date: str) -> str:
  if len(date) == 10:
    return date
  return f"{datetime.datetime.now().year}.{date}"


def Time(time: str) -> str:
  if len(time) == 5:
    return time
  return '23:59'

def main():
  data_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data')
  sorted_set = Init(data_path)
  while True:
    command = input().split(' ', maxsplit=3)
    if len(command) == 1 and command[0] in ('pop', 'top', 'all', 'exit'):
      if command[0] == 'top':
        if len(sorted_set) > 0:
          print(sorted_set[0])
      elif command[0] == 'all':
        for record in sorted_set:
          print(record)
      elif command[0] == 'pop':
        if len(sorted_set) > 0:
          del sorted_set[0]
      else: # command[0] == 'exit':
        Save(sorted_set, data_path)
        break
    elif len(command) == 4 and command[0] in ('add', 'remove', 'rm') and RoughValidate(command[1], command[2]):
      record = Parse(' '.join((Date(command[1]), Time(command[2]), command[3])))
      if command[0] == 'add':
        sorted_set.add(record)
      else: # command[0] == 'remove' or 'rm'
        if record in sorted_set:
          sorted_set.remove(record)
    else:
      print('Unknown command.')


if __name__ == "__main__":
  main()
